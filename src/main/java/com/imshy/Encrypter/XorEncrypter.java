package com.imshy.Encrypter;

import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;

// will be used to store user passwords, excluding the master password
public class XorEncrypter {

    private final int RADIX = 20;
    private String key;

    private static XorEncrypter instance;

    private XorEncrypter() {
        // TODO Seed will be generated by a unique identifier to the user's pc
        key = "2349082340978235";
    }
    // should only run once at the start
    private void setKey(String key)
    {
        StringBuilder sb = new StringBuilder();
        key.chars().boxed().forEach(sb::append);
        this.key = sb.toString();
    }
    public void setKeyAndSalt(String key)
    {
        setKey(addSalt(key));
    }
    private String addSalt(String key)
    {
        return key + "meatballs";
    }

    public static XorEncrypter getInstance()
    {
        if(instance == null)
        {
            instance = new XorEncrypter();
        }
        return instance;
    }

    public final String encrypt(String password) {
        if (password == null) throw new NullPointerException("Null cannot be encrypted");
        if (password.length() == 0) throw new IllegalArgumentException("Cannot encrypt empty string");

        BigInteger bi_passwd = new BigInteger(password.getBytes());

        BigInteger bi_r0 = new BigInteger(key);
        BigInteger bi_r1 = bi_r0.xor(bi_passwd);

        return bi_r1.toString(RADIX);
    }

    public final String decrypt(String encrypted) {
        if (encrypted == null) throw new NullPointerException("Null cannot be decrypted");
        if (encrypted.length() == 0) throw new IllegalArgumentException("Decrypted String cannot be empty. If you see a password file with no data inside, delete it");

        BigInteger bi_confuse = new BigInteger(key);

        try {
            BigInteger bi_r1 = new BigInteger(encrypted, RADIX);
            BigInteger bi_r0 = bi_r1.xor(bi_confuse);

            return new String(bi_r0.toByteArray());

        } catch (Exception e) {
            return "";
        }
    }
}
